program               = { statement };

statement             = variable_declaration
                      | constant_declaration
                      | assign_declaration
                      | loop_statement
                      | loop_substatment
                      | conditional_statement
                      | function_statement
                      | return_statement
                      | pattern_match_stmt;

variable_declaration  = "let" identifier "=" expression ";";
constant_declaration  = "const" identifier "=" expression ";";
assign_declaration    = identifier "=" expression ";";
loop_statement        = "for" identifier "in" iterator_expression "{" { statement } "}";
conditional_statement = "if" expression "{" { statement } "}" [ "else" "{" { statement } "}" ];
function_statement    = "fn" identifier "(" [ parameter_list ] ")" "{" { statement } "}";
pattern_match_stmt    = "match" expression "{" { when_substatement } default_substatement "}";

when_substatement     = "when" match_expression "then" "{" { statement } "}";
default_substatement  = "default" "{" { statement } "}";

return_statement      = "ret" [expression] ";";
loop_substatment      = "end;"
                      | "next;"


iterator_expression   = vector | identifier | range_expression | function_call;
range_expression      = range_factor "to" range_factor;
match_expression      = expression { "either" expression };

expression            = conjuction { "or" conjuction };
conjuction            = relation_expression { "and" relation_expression };
relation_expression   = simple_expression [relational_operator, simple_expression];
simple_expression     = term { lower_arithmetic term };
term                  = type_conversion { higher_arithmetic type_conversion };
type_conversion       = inversion [ cast_operator cast_type ];
inversion             = ["!"] factor;


factor                = literal
                      | identifier
                      | vector
                      | function_call
                      | vector_access
                      | "(" expression ")";

function_call         = identifier "(" [ argument_list ] ")";
parameter_list        = parameter { "," parameter };
parameter             = ["const"] identifier;
argument_list         = expression { "," expression };

range_factor          = natural_number | identifier;

vector_access         = (identifier | function_call) "[" expression "]";

cast_operator         = "as";

literal               = numeric_literal
                      | string_literal
                      | logic_literal;

logic_literal         = "true" | "false";

cast_type             = "int"
                      | "float"
                      | "bool"
                      | "string";

lower_arithmetic      = "+"
                      | "-";

higher_arithmetic     = "*"
                      | "/"
                      | "%";

relational_operator   = "<"
                      | "<="
                      | ">"
                      | ">="
                      | "=="
                      | "!=";

vector                = "[" [ expression { "," expression } ] "]";

numeric_literal       =  integer_number
                      |  real_number;

string_literal        = '"' character { character } '"';

identifier            = letter { letter | digit | "_" };

real_number           = integer_literal "." digit { digit };

integer_number        = ["-"] natural_number;

natural_number        = (digit_without_zero { digit })
                      | "0";

character             = escape_character | letter | digit | " " | " " | "." | "," | "!" | "?" | ":" | "-" | "_" | "/" | "+" | "=";

escape_character      = "#", ( "\t" | "\r" | "\n" | "\"" | "#") ;

digit                 = "0" | digit_without_zero;

letter                = [a-zA-Z];

digit_without_zero    = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";